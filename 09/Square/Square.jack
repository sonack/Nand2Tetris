// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/Square.jack

/** Implements a graphical square. */
class Square {

   field int x, y; // screen location of the square's top-left corner
   field int size; // length of this square, in pixels

   /** Constructs a new square with a given location and size. */
   constructor Square new(int Ax, int Ay, int Asize) {
      let x = Ax;
      let y = Ay;
      let size = Asize;
      do draw();
      return this;
   }

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the square on the screen. */
   // method void draw() {
   //    do Screen.setColor(true);
   //    do Screen.drawRectangle(x, y, x + size, y + size);
   //    return;
   // }

   method void draw(){
      var int location, memAddress;
      let location = (32 * 16 * y) + x;
      // do Output.printInt(location);
      // do Output.printChar(32);
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 8176);
      do Memory.poke(memAddress+32, 13400);
      do Memory.poke(memAddress+64, 15036);
      do Memory.poke(memAddress+96, 13404);
      do Memory.poke(memAddress+128, 28694);
      do Memory.poke(memAddress+160, -7090);
      do Memory.poke(memAddress+192, -10281);
      do Memory.poke(memAddress+224, -14301);
      do Memory.poke(memAddress+256, -14397);
      do Memory.poke(memAddress+288, -8845);
      do Memory.poke(memAddress+320, -19117);
      do Memory.poke(memAddress+352, 14297);
      do Memory.poke(memAddress+384, 25678);
      do Memory.poke(memAddress+416, 10180);
      do Memory.poke(memAddress+448, 1728);
      do Memory.poke(memAddress+480, 3808);
      return;
   }

   method void erase(){
      var int location, memAddress;
      let location = (32 * 16 * y) + x;
      let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 0);
      do Memory.poke(memAddress+32, 0);
      do Memory.poke(memAddress+64, 0);
      do Memory.poke(memAddress+96, 0);
      do Memory.poke(memAddress+128, 0);
      do Memory.poke(memAddress+160, 0);
      do Memory.poke(memAddress+192, 0);
      do Memory.poke(memAddress+224, 0);
      do Memory.poke(memAddress+256, 0);
      do Memory.poke(memAddress+288, 0);
      do Memory.poke(memAddress+320, 0);
      do Memory.poke(memAddress+352, 0);
      do Memory.poke(memAddress+384, 0);
      do Memory.poke(memAddress+416, 0);
      do Memory.poke(memAddress+448, 0);
      do Memory.poke(memAddress+480, 0);
      return;
   }

   /** Erases the square from the screen. */
   // method void erase() {
      // do Screen.setColor(false);
      // do Screen.drawRectangle(x, y, x + size, y + size);

      // return;
   // }

    /** Increments the square size by 2 pixels. */
   method void incSize() {
      // if (((y + size) < 254) & ((x + size) < 510)) {
      //    do erase();
      //    let size = size + 2;
      //    do draw();
      // }
      do Output.printString("Fuck World!");
      do Output.println();
      return;
   }

   /** Decrements the square size by 2 pixels. */
   method void decSize() {
      // if (size > 2) {
      //    do erase();
      //    let size = size - 2;
      //    // do Output.printInt(size);
      //    do draw();
      // }
      do Output.printString("Hello World!");
      do Output.println();
      return;
   }

   /** Moves the square up by 2 pixels. */
   method void moveUp() {
      if (y > 0) {
         do erase();
         // do Screen.setColor(false);
         // do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 1;
         // do Screen.setColor(true);
         // do Screen.drawRectangle(x, y, x + size, y + 1);
         do draw();
      }
      return;
   }

   /** Moves the square down by 2 pixels. */
   method void moveDown() {
      if (y < 15) {
         do erase();
         // do Screen.setColor(false);
         // do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 1;
         // do Output.printInt(y);
         // do Screen.setColor(true);
         // do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         do draw();
      }
      return;
   }

   /** Moves the square left by 2 pixels. */
   method void moveLeft() {
      if (x > 0) {
         do erase();
         // do Screen.setColor(false);
         // do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 1;
         // do Screen.setColor(true);
         // do Screen.drawRectangle(x, y, x + 1, y + size);
         do draw();
      }
      return;
   }

   /** Moves the square right by 2 pixels. */
   method void moveRight() {
      if (x < 31) {
         do erase();
         // do Screen.setColor(false);
         // do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 1;
         // do Screen.setColor(true);
         // do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         do draw();
      }
      return;
   }
}
