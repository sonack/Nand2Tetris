// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 

// 32K = 2K(stack) + 14K(heap) + 8K(Screen IO mmap) + 1(Keyboard IO mmap)

// 2048: 14334
// 2049: 16384

// block
// header(2):
// size: not including header(2), 0 means occupied
// next: tail = 16384
// data

class Memory {
    static Array ram, freeList, heap, tail;
    static int next, size;
    static boolean has_deFrag;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let tail = 16384;
        let freeList = heap;
        let size = 0;
        let next = 1;
        let has_deFrag = true;
        let heap[next] = tail;
        let heap[size] = tail - heap - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    // cur split to cur(used) and remain(unused)
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int alloc_size) {
        var Array cur, new_block, remain_block;
        var boolean found;
        var int cur_size, size_with_head;

        let cur = freeList;
        let found = false;
        while ((~(cur = tail)) & (~found)) {
            let cur_size = cur[size];
            // cur_size >= size + 2
            let size_with_head = alloc_size + 2;
            if (~(cur_size < size_with_head)) {
                let remain_block = cur + size_with_head;
                let remain_block[size] = cur_size - size_with_head;
                let remain_block[next] = cur[next];
                let cur[next] = remain_block;

                // available size is 0
                let cur[size] = 0; 
                let new_block = cur + 2;
                let found = true;
                if (cur = freeList) {
                    let freeList = cur[next];
                }
            }
            let cur = cur[next];
        }
        if (~found) {
            if (~has_deFrag) {
                do Memory.deFrag();
                return Memory.alloc(alloc_size);
            }
            else {
                // do Sys.error(3);
                do Output.printInt(found);
            }
        }

        return new_block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array obj_base, tmp;
        let has_deFrag = false;
        let obj_base = o - 2;
        let obj_base[size] = obj_base[next] - o;
        if (obj_base < freeList) {
            let freeList = obj_base;
        }
        do Memory.deFrag();
        return;
    }

    // defragment the whole heap memory
    // merge continuous empty memory blocks
    // may not use printString inside deFrag(), as it will alloc new block
    function void deFrag() {
        var Array cur;
        var Array free_start, free_end;
        let has_deFrag = true;
        let cur = freeList;
        let free_start = freeList;

        while (~(cur = tail)) {
            // find next occupied block
            while ((~(cur = tail)) & ((cur[next] = cur + 2) | (cur[size] > 0))) {
                let cur = cur[next];
            }
            let free_end = cur;
            // more than 1 block
            if (free_end > free_start[next]) {
                let free_start[next] = free_end;
                let free_start[size] = (free_end - free_start) - 2;
            }
            // find next free block
            // header-only or free blocks
            while ((~(cur = tail)) & ((cur[next] > (cur + 2)) & (cur[size] = 0))) {
                let cur = cur[next];
            }
            let free_start = cur;
        }
        return;
    }

    // official: 4812 11570 16384
    // my output class: 3433 12949 16384
    // 14334 - 96 * 11 - 4 - 127 - (2 + 1 + 96) * 2 
    function void inspect() {
        var Array cur;
        let cur = freeList;
        do Output.printString("=========");
        while (~(cur = tail)) {
            do Output.printInt(cur);
            do Output.printChar(32);
            do Output.printInt(cur[size]);
            do Output.printChar(32);
            do Output.printInt(cur[next]);
            do Output.println();
            let cur = cur[next];
        }
        do Output.printString("=========");
        return;
    }
}
