// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    function Array twoToThe() {
        return twoToThe;
    }

    /** Initializes the library. */
    function void init() {
        var int i;
        let i = 1;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;

        while (i < 16) {
            let twoToThe[i] = twoToThe[i - 1] + twoToThe[i - 1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }
        return x;
    }

    //** Returns true if the i-th bit of x is 1, false otherwise
    function boolean bit(int x, int i) {
        if ((x & twoToThe[i]) = twoToThe[i]) {
            return true;
        }
        return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    
    function int divide(int x, int y) {
        var int sign_x, sign_y;

        let sign_x = 1;
        let sign_y = 1;
        if (x < 0) {
            let sign_x = -1;
            let x = -x;
        }
        if (y < 0) {
            let sign_y = -1;
            let y = -y;
        }
        return (sign_x * sign_y) * Math.divideAbs(x, y);
    }

    function int divideAbs(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) { return 0; }
        let q = Math.divideAbs(x, y + y);
        if ((x - (2 * q * y)) < y) {
            return (2 * q);
        } else {
            return ((2 * q) + 1);
        }
    }

    function int mod(int x, int y) {
        return x - ((x / y) * y);
    }
    
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // x < 2 ** 15
        var int y, j, tmp, tmp2;
        let y = 0;
        let j = 7;
        // j >= 0
        while (~(j < 0)) {
            let tmp = y + twoToThe[j];
            let tmp2 = tmp * tmp;
            // deal with overflow
            if ( (~(tmp2 > x)) & (tmp2 > 0) ) {
                let y = tmp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
