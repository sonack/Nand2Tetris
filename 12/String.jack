// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    // field Array this;
    field int capacity, length;
    field Array data;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let data = Array.new(maxLength);
        }
        let capacity = maxLength;
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(data = null)) {
            do data.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return data[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let data[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length = capacity) {
            do Sys.error(1);
        } else {
            let data[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {
            do Sys.error(1);
        }
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int num, i, sign;

        let sign = 1;
        // deal with neg num
        if ((length > 0) & (data[0] = 45)) {
            let sign = -1;
            let i = 1;
        }
        while (i < length) {
            if ((data[i] < 48) | (data[i] > 57)) {
                return sign * num;
            }
            let num = 10 * num + (data[i] - 48);
            let i = i + 1;
        }
        return sign * num;
    }

    /*
    method void reverse(int start_i) {
        var int half_pt, sym_sum, i, tmp, sym_idx;

        let i = start_i;
        let sym_sum = (length - 1) + start_i;
        let half_pt = sym_sum / 2;
        while (i < half_pt) {
            let sym_idx = sym_sum - i;
            let tmp = data[i];
            let data[i] = data[sym_idx];
            let data[sym_idx] = tmp;
            let i = i + 1;
        }
        return;
    }
    */

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        /*     
        var int i, j, len_half, tmp;
        var int start_i;

        if (val = 0) {
            let length = 1;
            let data[0] = 48;
        } else {
            if (val < 0) {
                let val = -val;
                let data[0] = 45;
                let i = 1; 
            }
            let start_i = i;
            while (~(val = 0)) {
                let tmp = val / 10;
                let data[i] = (val - (tmp * 10)) + 48;
                let val = tmp;
                let i = i + 1;
            }
            let length = i;
            // reverse str
            do reverse(start_i);
        }
        */

        let length = 0;
        if (val < 0) {
            let val = -val;
            let data[0] = 45;
            let length = 1;
        }
        do int2String(val);
        return;
    }

    method void int2String(int val) {
        var int q, r;
    
        let q = val / 10;
        let r = (val - (q * 10)) + 48;
        if (val < 10) {
            let data[length] = r;
            let length = length + 1;
        } else {
            do int2String(q);
            let data[length] = r;
            let length = length + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
