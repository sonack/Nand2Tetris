// Created on 2020-02-18 01:19:57 by sonack compiler.
function Screen.init 1
push constant 1
neg
pop static 0
push constant 16384
pop static 1
call Math.twoToThe 0
pop static 2
push constant 16
call Array.new 1
pop static 3
push static 3
push constant 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label Screen.init.WHILE_0.START
push local 0
push constant 16
lt
not
if-goto Screen.init.WHILE_0.CONT
push static 3
push local 0
add
push static 3
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
push static 2
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Screen.init.WHILE_0.START
label Screen.init.WHILE_0.CONT
push constant 16
call Array.new 1
pop static 4
push static 4
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label Screen.init.WHILE_1.START
push local 0
push constant 16
lt
not
if-goto Screen.init.WHILE_1.CONT
push static 4
push local 0
add
push static 4
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
push static 2
push local 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Screen.init.WHILE_1.START
label Screen.init.WHILE_1.CONT
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label Screen.clearScreen.WHILE_0.START
push local 0
push constant 8096
eq
not
not
if-goto Screen.clearScreen.WHILE_0.CONT
push static 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Screen.clearScreen.WHILE_0.START
label Screen.clearScreen.WHILE_0.CONT
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 4
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Math.mod 2
pop local 1
push static 1
push local 0
add
pop pointer 1
push that 0
pop local 2
push static 2
push local 1
add
pop pointer 1
push that 0
pop local 3
push static 0
not
if-goto Screen.drawPixel.IF_0.F_CASE
push local 2
push local 3
or
pop local 2
goto Screen.drawPixel.IF_0.CONT
label Screen.drawPixel.IF_0.F_CASE
push local 2
push local 3
not
and
pop local 2
label Screen.drawPixel.IF_0.CONT
push static 1
push local 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 15
push argument 0
push argument 2
eq
not
if-goto Screen.drawLine.IF_0.F_CASE
push argument 1
push argument 3
gt
not
if-goto Screen.drawLine.IF_1.F_CASE
push argument 1
pop local 3
push argument 3
pop argument 1
push local 3
pop argument 3
goto Screen.drawLine.IF_1.CONT
label Screen.drawLine.IF_1.F_CASE
label Screen.drawLine.IF_1.CONT
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 7
push constant 32
push argument 3
call Math.multiply 2
push argument 2
push constant 16
call Math.divide 2
add
pop local 9
push static 2
push argument 0
push constant 16
call Math.mod 2
add
pop pointer 1
push that 0
pop local 8
push local 7
pop local 12
label Screen.drawLine.WHILE_0.START
push local 12
push local 9
gt
not
not
if-goto Screen.drawLine.WHILE_0.CONT
push static 0
not
if-goto Screen.drawLine.IF_2.F_CASE
push local 13
push local 8
or
pop local 13
goto Screen.drawLine.IF_2.CONT
label Screen.drawLine.IF_2.F_CASE
push local 13
push local 8
not
and
pop local 13
label Screen.drawLine.IF_2.CONT
push static 1
push local 12
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 12
push constant 32
add
pop local 12
goto Screen.drawLine.WHILE_0.START
label Screen.drawLine.WHILE_0.CONT
push constant 0
return
goto Screen.drawLine.IF_0.CONT
label Screen.drawLine.IF_0.F_CASE
label Screen.drawLine.IF_0.CONT
push argument 1
push argument 3
eq
not
if-goto Screen.drawLine.IF_3.F_CASE
push argument 0
push argument 2
gt
not
if-goto Screen.drawLine.IF_4.F_CASE
push argument 0
pop local 3
push argument 2
pop argument 0
push local 3
pop argument 2
goto Screen.drawLine.IF_4.CONT
label Screen.drawLine.IF_4.F_CASE
label Screen.drawLine.IF_4.CONT
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 7
push constant 32
push argument 3
call Math.multiply 2
push argument 2
push constant 16
call Math.divide 2
add
pop local 9
push local 7
push local 9
eq
not
if-goto Screen.drawLine.IF_5.F_CASE
label Screen.drawLine.WHILE_1.START
push argument 0
push argument 2
gt
not
not
if-goto Screen.drawLine.WHILE_1.CONT
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto Screen.drawLine.WHILE_1.START
label Screen.drawLine.WHILE_1.CONT
goto Screen.drawLine.IF_5.CONT
label Screen.drawLine.IF_5.F_CASE
push static 3
push argument 0
push constant 16
call Math.mod 2
add
pop pointer 1
push that 0
pop local 8
push static 4
push argument 2
push constant 16
call Math.mod 2
add
pop pointer 1
push that 0
pop local 10
push local 9
push local 7
sub
push constant 1
sub
pop local 11
push local 7
pop local 14
push static 1
push local 14
add
pop pointer 1
push that 0
pop local 13
push static 0
not
if-goto Screen.drawLine.IF_6.F_CASE
push local 13
push local 8
or
pop local 13
goto Screen.drawLine.IF_6.CONT
label Screen.drawLine.IF_6.F_CASE
push local 13
push local 8
not
and
pop local 13
label Screen.drawLine.IF_6.CONT
push static 1
push local 14
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 12
label Screen.drawLine.WHILE_2.START
push local 12
push local 11
lt
not
if-goto Screen.drawLine.WHILE_2.CONT
push local 14
push constant 1
add
pop local 14
push static 1
push local 14
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 12
push constant 1
add
pop local 12
goto Screen.drawLine.WHILE_2.START
label Screen.drawLine.WHILE_2.CONT
push local 14
push constant 1
add
pop local 14
push static 1
push local 14
add
pop pointer 1
push that 0
pop local 13
push static 0
not
if-goto Screen.drawLine.IF_7.F_CASE
push local 13
push local 10
or
pop local 13
goto Screen.drawLine.IF_7.CONT
label Screen.drawLine.IF_7.F_CASE
push local 13
push local 10
not
and
pop local 13
label Screen.drawLine.IF_7.CONT
push static 1
push local 14
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
label Screen.drawLine.IF_5.CONT
push constant 0
return
goto Screen.drawLine.IF_3.CONT
label Screen.drawLine.IF_3.F_CASE
label Screen.drawLine.IF_3.CONT
push argument 0
push argument 2
gt
not
if-goto Screen.drawLine.IF_8.F_CASE
push argument 0
pop local 3
push argument 2
pop argument 0
push local 3
pop argument 2
push argument 1
pop local 3
push argument 3
pop argument 1
push local 3
pop argument 3
goto Screen.drawLine.IF_8.CONT
label Screen.drawLine.IF_8.F_CASE
label Screen.drawLine.IF_8.CONT
push constant 1
pop local 6
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
push local 5
push constant 0
lt
not
if-goto Screen.drawLine.IF_9.F_CASE
push constant 1
neg
pop local 6
push local 5
neg
pop local 5
goto Screen.drawLine.IF_9.CONT
label Screen.drawLine.IF_9.F_CASE
label Screen.drawLine.IF_9.CONT
push local 0
push local 5
call Math.multiply 2
push local 1
push local 4
call Math.multiply 2
sub
pop local 2
label Screen.drawLine.WHILE_3.START
push local 0
push local 4
gt
not
push local 1
push local 5
gt
not
and
not
if-goto Screen.drawLine.WHILE_3.CONT
push argument 0
push local 0
add
push argument 1
push local 6
push local 1
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
not
if-goto Screen.drawLine.IF_10.F_CASE
push local 0
push constant 1
add
pop local 0
push local 2
push local 5
add
pop local 2
goto Screen.drawLine.IF_10.CONT
label Screen.drawLine.IF_10.F_CASE
push local 1
push constant 1
add
pop local 1
push local 2
push local 4
sub
pop local 2
label Screen.drawLine.IF_10.CONT
goto Screen.drawLine.WHILE_3.START
label Screen.drawLine.WHILE_3.CONT
push constant 0
return
function Screen.drawRectangle 9
push argument 2
push constant 16
call Math.divide 2
push argument 0
push constant 16
call Math.divide 2
sub
push constant 1
sub
pop local 5
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 1
push static 3
push argument 0
push constant 16
call Math.mod 2
add
pop pointer 1
push that 0
pop local 3
push static 4
push argument 2
push constant 16
call Math.mod 2
add
pop pointer 1
push that 0
pop local 4
push local 1
pop local 6
push local 5
push constant 0
lt
not
if-goto Screen.drawRectangle.IF_0.F_CASE
push local 3
push local 4
and
pop local 3
label Screen.drawRectangle.WHILE_0.START
push argument 1
push argument 3
gt
not
not
if-goto Screen.drawRectangle.WHILE_0.CONT
push static 1
push local 6
add
pop pointer 1
push that 0
pop local 8
push static 0
not
if-goto Screen.drawRectangle.IF_1.F_CASE
push local 8
push local 3
or
pop local 8
goto Screen.drawRectangle.IF_1.CONT
label Screen.drawRectangle.IF_1.F_CASE
push local 8
push local 3
not
and
pop local 8
label Screen.drawRectangle.IF_1.CONT
push static 1
push local 6
add
push local 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 32
add
pop local 6
push argument 1
push constant 1
add
pop argument 1
goto Screen.drawRectangle.WHILE_0.START
label Screen.drawRectangle.WHILE_0.CONT
goto Screen.drawRectangle.IF_0.CONT
label Screen.drawRectangle.IF_0.F_CASE
label Screen.drawRectangle.WHILE_1.START
push argument 1
push argument 3
gt
not
not
if-goto Screen.drawRectangle.WHILE_1.CONT
push static 1
push local 6
add
pop pointer 1
push that 0
pop local 8
push static 0
not
if-goto Screen.drawRectangle.IF_2.F_CASE
push local 8
push local 3
or
pop local 8
goto Screen.drawRectangle.IF_2.CONT
label Screen.drawRectangle.IF_2.F_CASE
push local 8
push local 3
not
and
pop local 8
label Screen.drawRectangle.IF_2.CONT
push static 1
push local 6
add
push local 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 7
label Screen.drawRectangle.WHILE_2.START
push local 7
push local 5
lt
not
if-goto Screen.drawRectangle.WHILE_2.CONT
push local 6
push constant 1
add
pop local 6
push static 1
push local 6
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 7
push constant 1
add
pop local 7
goto Screen.drawRectangle.WHILE_2.START
label Screen.drawRectangle.WHILE_2.CONT
push local 6
push constant 1
add
pop local 6
push static 1
push local 6
add
pop pointer 1
push that 0
pop local 8
push static 0
not
if-goto Screen.drawRectangle.IF_3.F_CASE
push local 8
push local 4
or
pop local 8
goto Screen.drawRectangle.IF_3.CONT
label Screen.drawRectangle.IF_3.F_CASE
push local 8
push local 4
not
and
pop local 8
label Screen.drawRectangle.IF_3.CONT
push static 1
push local 6
add
push local 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 32
add
pop local 1
push local 1
pop local 6
push argument 1
push constant 1
add
pop argument 1
goto Screen.drawRectangle.WHILE_1.START
label Screen.drawRectangle.WHILE_1.CONT
label Screen.drawRectangle.IF_0.CONT
push constant 0
return
function Screen.drawCircle 8
push constant 0
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
push local 0
push local 0
call Math.multiply 2
pop local 1
label Screen.drawCircle.WHILE_0.START
push local 0
push argument 2
gt
not
not
if-goto Screen.drawCircle.WHILE_0.CONT
push local 2
push local 1
sub
call Math.sqrt 1
pop local 3
push argument 0
push local 3
sub
pop local 4
push argument 0
push local 3
add
pop local 5
push argument 1
push local 0
sub
pop local 6
push argument 1
push local 0
add
pop local 7
push local 4
push local 6
push local 5
push local 6
call Screen.drawLine 4
pop temp 0
push local 4
push local 7
push local 5
push local 7
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
add
push local 0
add
push local 0
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto Screen.drawCircle.WHILE_0.START
label Screen.drawCircle.WHILE_0.CONT
push constant 0
return
