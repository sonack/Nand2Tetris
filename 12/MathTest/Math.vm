// Created on 2020-02-16 00:21:33 by sonack compiler.
function Math.twoToThe 0
push static 0
return
function Math.init 1
push constant 1
pop local 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label Math.init.WHILE_0.START
push local 0
push constant 16
lt
not
if-goto Math.init.WHILE_0.CONT
push static 0
push local 0
add
push static 0
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
push static 0
push local 0
push constant 1
sub
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto Math.init.WHILE_0.START
label Math.init.WHILE_0.CONT
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto Math.abs.IF_0.F_CASE
push argument 0
neg
pop argument 0
goto Math.abs.IF_0.CONT
label Math.abs.IF_0.F_CASE
label Math.abs.IF_0.CONT
push argument 0
return
function Math.bit 0
push argument 0
push static 0
push argument 1
add
pop pointer 1
push that 0
and
push static 0
push argument 1
add
pop pointer 1
push that 0
eq
not
if-goto Math.bit.IF_0.F_CASE
push constant 1
neg
return
goto Math.bit.IF_0.CONT
label Math.bit.IF_0.F_CASE
label Math.bit.IF_0.CONT
push constant 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label Math.multiply.WHILE_0.START
push local 2
push constant 16
lt
not
if-goto Math.multiply.WHILE_0.CONT
push argument 1
push local 2
call Math.bit 2
not
if-goto Math.multiply.IF_0.F_CASE
push local 0
push local 1
add
pop local 0
goto Math.multiply.IF_0.CONT
label Math.multiply.IF_0.F_CASE
label Math.multiply.IF_0.CONT
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto Math.multiply.WHILE_0.START
label Math.multiply.WHILE_0.CONT
push local 0
return
function Math.divide 2
push constant 1
pop local 0
push constant 1
pop local 1
push argument 0
push constant 0
lt
not
if-goto Math.divide.IF_0.F_CASE
push constant 1
neg
pop local 0
push argument 0
neg
pop argument 0
goto Math.divide.IF_0.CONT
label Math.divide.IF_0.F_CASE
label Math.divide.IF_0.CONT
push argument 1
push constant 0
lt
not
if-goto Math.divide.IF_1.F_CASE
push constant 1
neg
pop local 1
push argument 1
neg
pop argument 1
goto Math.divide.IF_1.CONT
label Math.divide.IF_1.F_CASE
label Math.divide.IF_1.CONT
push local 0
push local 1
call Math.multiply 2
push argument 0
push argument 1
call Math.divideAbs 2
call Math.multiply 2
return
function Math.divideAbs 1
push argument 1
push argument 0
gt
push argument 1
push constant 0
lt
or
not
if-goto Math.divideAbs.IF_0.F_CASE
push constant 0
return
goto Math.divideAbs.IF_0.CONT
label Math.divideAbs.IF_0.F_CASE
label Math.divideAbs.IF_0.CONT
push argument 0
push argument 1
push argument 1
add
call Math.divideAbs 2
pop local 0
push argument 0
push constant 2
push local 0
call Math.multiply 2
push argument 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto Math.divideAbs.IF_1.F_CASE
push constant 2
push local 0
call Math.multiply 2
return
goto Math.divideAbs.IF_1.CONT
label Math.divideAbs.IF_1.F_CASE
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label Math.divideAbs.IF_1.CONT
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
function Math.sqrt 4
push constant 0
pop local 0
push constant 7
pop local 1
label Math.sqrt.WHILE_0.START
push local 1
push constant 0
lt
not
not
if-goto Math.sqrt.WHILE_0.CONT
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
not
push local 3
push constant 0
gt
and
not
if-goto Math.sqrt.IF_0.F_CASE
push local 2
pop local 0
goto Math.sqrt.IF_0.CONT
label Math.sqrt.IF_0.F_CASE
label Math.sqrt.IF_0.CONT
push local 1
push constant 1
sub
pop local 1
goto Math.sqrt.WHILE_0.START
label Math.sqrt.WHILE_0.CONT
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto Math.max.IF_0.F_CASE
push argument 0
return
goto Math.max.IF_0.CONT
label Math.max.IF_0.F_CASE
label Math.max.IF_0.CONT
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto Math.min.IF_0.F_CASE
push argument 0
return
goto Math.min.IF_0.CONT
label Math.min.IF_0.F_CASE
label Math.min.IF_0.CONT
push argument 1
return
