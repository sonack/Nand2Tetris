function Screen.init 1
push constant 0
not
pop static 0
push constant 16384
pop static 1
call Math.twoToThe 0
pop static 2
push constant 16
call Array.new 1
pop static 3
push constant 0
push static 3
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 3
add
push local 0
push constant 1
sub
push static 3
add
pop pointer 1
push that 0
push local 0
push constant 1
sub
push static 2
add
pop pointer 1
push that 0
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 16
call Array.new 1
pop static 4
push constant 0
push static 4
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 0
label WHILE_EXP1
push local 0
push constant 16
lt
not
if-goto WHILE_END1
push local 0
push static 4
add
push local 0
push constant 1
sub
push static 4
add
pop pointer 1
push that 0
push local 0
push static 2
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP1
label WHILE_END1
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push constant 8096
eq
not
not
if-goto WHILE_END0
push local 0
push static 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 4
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Math.mod 2
pop local 1
push local 0
push static 1
add
pop pointer 1
push that 0
pop local 2
push local 1
push static 2
add
pop pointer 1
push that 0
pop local 3
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push local 3
or
pop local 2
goto IF_END0
label IF_FALSE0
push local 2
push local 3
not
and
pop local 2
label IF_END0
push local 0
push static 1
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Screen.drawLine 15
push argument 0
push argument 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
push argument 3
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
pop local 3
push argument 3
pop argument 1
push local 3
pop argument 3
label IF_FALSE1
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 7
push constant 32
push argument 3
call Math.multiply 2
push argument 2
push constant 16
call Math.divide 2
add
pop local 9
push argument 0
push constant 16
call Math.mod 2
push static 2
add
pop pointer 1
push that 0
pop local 8
push local 7
pop local 12
label WHILE_EXP0
push local 12
push local 9
gt
not
not
if-goto WHILE_END0
push static 0
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 13
push local 8
or
pop local 13
goto IF_END2
label IF_FALSE2
push local 13
push local 8
not
and
pop local 13
label IF_END2
push local 12
push static 1
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 12
push constant 32
add
pop local 12
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
label IF_FALSE0
push argument 1
push argument 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push argument 0
push argument 2
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push argument 0
pop local 3
push argument 2
pop argument 0
push local 3
pop argument 2
label IF_FALSE4
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 7
push constant 32
push argument 3
call Math.multiply 2
push argument 2
push constant 16
call Math.divide 2
add
pop local 9
push local 7
push local 9
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
label WHILE_EXP1
push argument 0
push argument 2
gt
not
not
if-goto WHILE_END1
push argument 0
push argument 1
call Screen.drawPixel 2
pop temp 0
push argument 0
push constant 1
add
pop argument 0
goto WHILE_EXP1
label WHILE_END1
goto IF_END5
label IF_FALSE5
push argument 0
push constant 16
call Math.mod 2
push static 3
add
pop pointer 1
push that 0
pop local 8
push argument 2
push constant 16
call Math.mod 2
push static 4
add
pop pointer 1
push that 0
pop local 10
push local 9
push local 7
sub
push constant 1
sub
pop local 11
push local 7
pop local 14
push local 14
push static 1
add
pop pointer 1
push that 0
pop local 13
push static 0
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 13
push local 8
or
pop local 13
goto IF_END6
label IF_FALSE6
push local 13
push local 8
not
and
pop local 13
label IF_END6
push local 14
push static 1
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 12
label WHILE_EXP2
push local 12
push local 11
lt
not
if-goto WHILE_END2
push local 14
push constant 1
add
pop local 14
push local 14
push static 1
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 12
push constant 1
add
pop local 12
goto WHILE_EXP2
label WHILE_END2
push local 14
push constant 1
add
pop local 14
push local 14
push static 1
add
pop pointer 1
push that 0
pop local 13
push static 0
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push local 13
push local 10
or
pop local 13
goto IF_END7
label IF_FALSE7
push local 13
push local 10
not
and
pop local 13
label IF_END7
push local 14
push static 1
add
push local 13
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END5
push constant 0
return
label IF_FALSE3
push argument 0
push argument 2
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push argument 0
pop local 3
push argument 2
pop argument 0
push local 3
pop argument 2
push argument 1
pop local 3
push argument 3
pop argument 1
push local 3
pop argument 3
label IF_FALSE8
push constant 1
pop local 6
push argument 2
push argument 0
sub
pop local 4
push argument 3
push argument 1
sub
pop local 5
push local 5
push constant 0
lt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 1
neg
pop local 6
push local 5
neg
pop local 5
label IF_FALSE9
push local 0
push local 5
call Math.multiply 2
push local 1
push local 4
call Math.multiply 2
sub
pop local 2
label WHILE_EXP3
push local 0
push local 4
gt
not
push local 1
push local 5
gt
not
and
not
if-goto WHILE_END3
push argument 0
push local 0
add
push argument 1
push local 6
push local 1
call Math.multiply 2
add
call Screen.drawPixel 2
pop temp 0
push local 2
push constant 0
lt
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push local 0
push constant 1
add
pop local 0
push local 2
push local 5
add
pop local 2
goto IF_END10
label IF_FALSE10
push local 1
push constant 1
add
pop local 1
push local 2
push local 4
sub
pop local 2
label IF_END10
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Screen.drawRectangle 8
push constant 32
push argument 1
call Math.multiply 2
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push constant 32
push argument 3
call Math.multiply 2
push argument 2
push constant 16
call Math.divide 2
add
pop local 1
push argument 0
push constant 16
call Math.mod 2
push static 3
add
pop pointer 1
push that 0
pop local 2
push argument 2
push constant 16
call Math.mod 2
push static 4
add
pop pointer 1
push that 0
pop local 3
push argument 2
push constant 16
call Math.divide 2
push argument 0
push constant 16
call Math.divide 2
sub
push constant 1
sub
pop local 4
push local 0
pop local 5
label WHILE_EXP0
push local 5
push local 1
gt
not
not
if-goto WHILE_END0
push local 5
push static 1
add
pop pointer 1
push that 0
pop local 7
push static 0
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 7
push local 2
or
pop local 7
goto IF_END0
label IF_FALSE0
push local 7
push local 2
not
and
pop local 7
label IF_END0
push local 5
push static 1
add
push local 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 6
label WHILE_EXP1
push local 6
push local 4
eq
not
not
if-goto WHILE_END1
push local 5
push constant 1
add
pop local 5
push local 5
push static 1
add
push static 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP1
label WHILE_END1
push local 5
push constant 1
add
pop local 5
push local 5
push static 1
add
pop pointer 1
push that 0
pop local 7
push static 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 7
push local 3
or
pop local 7
goto IF_END1
label IF_FALSE1
push local 7
push local 3
not
and
pop local 7
label IF_END1
push local 5
push static 1
add
push local 7
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 32
add
pop local 0
push local 0
pop local 5
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Screen.drawCircle 8
push constant 0
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
push local 0
push local 0
call Math.multiply 2
pop local 1
label WHILE_EXP0
push local 0
push argument 2
gt
not
not
if-goto WHILE_END0
push local 2
push local 1
sub
call Math.sqrt 1
pop local 3
push argument 0
push local 3
sub
pop local 4
push argument 0
push local 3
add
pop local 5
push argument 1
push local 0
sub
pop local 6
push argument 1
push local 0
add
pop local 7
push local 4
push local 6
push local 5
push local 6
call Screen.drawLine 4
pop temp 0
push local 4
push local 7
push local 5
push local 7
call Screen.drawLine 4
pop temp 0
push local 1
push constant 1
add
push local 0
add
push local 0
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
