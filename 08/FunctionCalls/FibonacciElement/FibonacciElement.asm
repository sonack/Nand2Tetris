// *******************************************
// **** Compile Time: 2020-02-06 17:05:23 ****
// *******************************************
// bootstrap
@256
D=A
@SP
M=D
// call Sys.init 0
@BootStrap$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@R15
M=1
(BootStrap$saveCtx.0)
@R15
D=M
@THAT
D=D-A
@BootStrap$saveCtxCont.0
D;JGT
@R15
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
M=M+1
@BootStrap$saveCtx.0
0;JMP
(BootStrap$saveCtxCont.0)
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// goto Sys.init
@Sys.init
0;JMP
(BootStrap$ret.0)
// ******************************************************
// **** File: FunctionCalls/FibonacciElement/Main.vm ****
// ******************************************************
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
(Main.fibonacci$$INIT_LCL_VARS)
@Main.fibonacci$$INIT_LCL_VARS_OVER
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
D=D-1
@Main.fibonacci$$INIT_LCL_VARS
0;JMP
(Main.fibonacci$$INIT_LCL_VARS_OVER)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
@SP
A=M
D=M
A=A-1
D=M-D
@TRUE_LT_0
D; JLT
@SP
A=M-1
M=0
@CONT_LT_0
0;JMP
(TRUE_LT_0)
@SP
A=M-1
M=-1
(CONT_LT_0)
// if-goto IF_TRUE
@SP
M=M-1
@SP
A=M
D=M
@Main.fibonacci$IF_TRUE
D; JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAddr
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
@endFrame
D=M
@2
A=D-A
D=M
@THIS
M=D
@endFrame
D=M
@3
A=D-A
D=M
@ARG
M=D
@endFrame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@R15
M=1
(Main.fibonacci$saveCtx.0)
@R15
D=M
@THAT
D=D-A
@Main.fibonacci$saveCtxCont.0
D;JGT
@R15
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
M=M+1
@Main.fibonacci$saveCtx.0
0;JMP
(Main.fibonacci$saveCtxCont.0)
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
// push argument 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
@SP
A=M
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@R15
M=1
(Main.fibonacci$saveCtx.1)
@R15
D=M
@THAT
D=D-A
@Main.fibonacci$saveCtxCont.1
D;JGT
@R15
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
M=M+1
@Main.fibonacci$saveCtx.1
0;JMP
(Main.fibonacci$saveCtxCont.1)
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
// add
@SP
M=M-1
@SP
A=M
D=M
A=A-1
M=D+M
// return
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAddr
M=D
@SP
M=M-1
@SP
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
D=M
@1
A=D-A
D=M
@THAT
M=D
@endFrame
D=M
@2
A=D-A
D=M
@THIS
M=D
@endFrame
D=M
@3
A=D-A
D=M
@ARG
M=D
@endFrame
D=M
@4
A=D-A
D=M
@LCL
M=D
@retAddr
A=M
0;JMP
// *****************************************************
// **** File: FunctionCalls/FibonacciElement/Sys.vm ****
// *****************************************************
// function Sys.init 0
(Sys.init)
@0
D=A
(Sys.init$$INIT_LCL_VARS)
@Sys.init$$INIT_LCL_VARS_OVER
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
D=D-1
@Sys.init$$INIT_LCL_VARS
0;JMP
(Sys.init$$INIT_LCL_VARS_OVER)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@R15
M=1
(Sys.init$saveCtx.0)
@R15
D=M
@THAT
D=D-A
@Sys.init$saveCtxCont.0
D;JGT
@R15
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@R15
M=M+1
@Sys.init$saveCtx.0
0;JMP
(Sys.init$saveCtxCont.0)
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
// goto Main.fibonacci
@Main.fibonacci
0;JMP
(Sys.init$ret.0)
// label WHILE
(Sys.init$WHILE)
// goto WHILE
@Sys.init$WHILE
0;JMP
